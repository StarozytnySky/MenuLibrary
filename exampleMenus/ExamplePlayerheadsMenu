import MenuButton;
import MenuHolder;
import UpdateTittleContainers;
import org.brokenarrow.storage.api.PreferenceSettingsRegisteryApi;
import org.brokenarrow.storage.util.GuiTempletsYaml;
import org.brokenarrow.storage.util.ItemUtily;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SkullMeta;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

public class testMenu extends MenuHolder im{
	private final MenuButton LinkButton;
	private final MenuButton otherTest;
	private final MenuButton tett;
	private final MenuButton forward;
	private final MenuButton previous;
	private final MenuButton fillItems;
	private int number;

	private final PreferenceSettingsRegisteryApi preferenceRegistery = PreferenceSettingsRegisteryApi.getInstance();

	public testMenu() {
		super("your plugin", 54);


		setTitle("test tittle for menu");
		setFillSpace(IntStream.rangeClosed(1, 2).boxed().collect(Collectors.toList()));
		//setItemsPerPage(3);
		LinkButton = new MenuButton() {
			@Override
			public void onClickInsideMenu(Player player, Inventory menu, ClickType click, ItemStack clickedItem, Object object) {

				System.out.println("send this test for LinkButton menu " + player);
			}

			@Override
			public ItemStack getItem() {
				return new ItemStack(Material.HOPPER);
			}
		};

		otherTest = new MenuButton() {
			@Override
			public void onClickInsideMenu(Player player, Inventory menu, ClickType click, ItemStack clickedItem, Object object) {
				System.out.println("send this test for otherTest menu " + player);
				if (click.isLeftClick())
					number = 1;
				else
					number = 0;
				updateButtons();
			}

			@Override
			public ItemStack getItem() {
				if (number == 1)
					return new ItemStack(Material.BEACON);
				else return new ItemStack(Material.ACACIA_LOG);
			}
		};

		tett = new MenuButton() {
			@Override
			public void onClickInsideMenu(Player player, Inventory menu, ClickType click, ItemStack clickedItem, Object object) {
				System.out.println("send this test for otherTest menu " + click);
			}

			@Override
			public ItemStack getItem() {
				return new ItemStack(Material.GLASS_PANE);
			}
		};
		previous = new MenuButton() {
			@Override
			public void onClickInsideMenu(Player player, Inventory menu, ClickType click, ItemStack clickedItem, Object object) {

				if (click.isLeftClick()) {
					previousPage();
				}

				Bukkit.getScheduler().runTaskLater("your plugin",() -> UpdateTittleContainers.update(player, GuiTempletsYaml.getGuiTitle("Settings_Menu", getPageNumber()), Material.CHEST, getMenu().getSize()));
				updateButtons();
			}

			@Override
			public ItemStack getItem() {
				return new ItemStack(Material.ARROW);
			}
		};
		forward = new MenuButton() {
			@Override
			public void onClickInsideMenu(Player player, Inventory menu, ClickType click, ItemStack clickedItem, Object object) {
				if (click.isLeftClick()) {
					nextPage();
				}
				Bukkit.getScheduler().runTaskLater("your plugin",() -> UpdateTittleContainers.update(player, GuiTempletsYaml.getGuiTitle("Settings_Menu", getPageNumber()), Material.CHEST, getMenu().getSize()));
				updateButtons();
			}

			@Override
			public ItemStack getItem() {
				return new ItemStack(Material.RABBIT_FOOT);
			}
		};

		fillItems = new MenuButton() {
			@Override
			public void onClickInsideMenu(Player player, Inventory menu, ClickType click, ItemStack clickedItem, Object object) {

				if (clickedItem.getType() == Material.PLAYER_HEAD) {
					SkullMeta meta = (SkullMeta) clickedItem.getItemMeta();
					if (meta.getOwningPlayer().getPlayer() != null && meta.getOwningPlayer().getPlayer().equals(getViewer()))
						System.out.println("this is owner ");
					else System.out.println("tis is clied " + meta.getOwningPlayer().getName());
				}

				System.out.println("fil items return ");
			}

			@Override
			public ItemStack getItem() {
				return null;
			}

			@Override
			public ItemStack getItem(Object object) {
				//setListOfFillItems(preferenceRegistery.getPlayers(player));

				if (object instanceof UUID) {
					return ItemUtily.createItemStack(GuiTempletsYaml.getIcon("PartylistMenu", "Players_List", (UUID) object),
							GuiTempletsYaml.getDisplayName("PartylistMenu", "Players_List", Bukkit.getOfflinePlayer((UUID) object).getName()),
							GuiTempletsYaml.getLore("PartylistMenu", "Players_List"));
				}
				if (object instanceof ItemStack) {
					if (((ItemStack) object).getType() == Material.PLAYER_HEAD) {
						SkullMeta meta = (SkullMeta) ((ItemStack) object).getItemMeta();
						if (meta.getOwningPlayer() != null) {
							ItemStack result = ItemUtily.createItemStack(GuiTempletsYaml.getIcon("PartylistMenu", "Players_List", meta.getOwningPlayer().getUniqueId()));
							return ItemUtily.createItemStack(result,
									GuiTempletsYaml.getDisplayName("PartylistMenu", "Players_List", meta.getOwningPlayer().getName()),
									GuiTempletsYaml.getLore("PartylistMenu", "Players_List"));
						}
					}

				}
				return null;
			}
		};

	}

	@Override
	public ItemStack getFillItemsAt(int slot) {
		return fillItems.getItem(slot,null);
	}

	@Override
	public ItemStack getItemAt(int slot) {

		if (slot == 48) {
			return LinkButton.getItem();
		}
		if (slot == 47)
			return otherTest.getItem();

		if (slot == 52)
			return previous.getItem();

		if (slot == 50)
			return forward.getItem();


		return null;
	}
}